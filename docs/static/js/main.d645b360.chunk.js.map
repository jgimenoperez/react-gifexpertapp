{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchgifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputvalue","setinputvalue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototypes","Proptypes","func","isRequired","getGifs","categorie","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","categoria","loading","state","setstate","useEffect","then","imgs","useFetchgifs","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KA0B9C,OACI,8BAEG,sBAAMC,SAnBM,SAACC,GAEZA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAO,IAEzBR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAYnB,SAEK,uBACIO,KAAK,OACLC,MAAOT,EACPU,SA9BQ,SAACP,GAGjBF,EAAcE,EAAEQ,OAAOF,eAqCnCZ,EAAYe,WAAW,CACnBd,c,OAAee,EAAUC,KAAKC,Y,oCChDrBC,EAAO,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,iDACqCC,UAAUH,GAD/C,+DAECI,MAAOF,GAFR,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAQD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CAEFC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXzB,kBAkBVM,GAlBU,4CAAF,sDCEPO,EAAc,SAAC,GAAuB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAIrC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBACIC,IAAKf,EACLgB,IAAKN,IAET,kCAAKA,EAAL,WCNCO,EAAU,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,UAAe,ECHd,SAAEoB,GAAgB,IAAD,EAEbtC,mBAAS,CAC/ByB,KAAK,GACLc,SAAQ,IAJ2B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAoEvC,OA5DAC,qBAAU,WAENzB,EAASqB,GACRK,MAAM,SAAAC,GAICH,EAAS,CACLhB,KAAQmB,EACRL,SAAQ,SAMrB,CAACD,IA6CGE,ED/DqBK,CAAc3B,GAA9Ba,EAFwB,EAE7BN,KAAYc,EAFiB,EAEjBA,QAKnB,OAEI,qCACI,qBAAIL,UAAU,oCAAd,cAAoDhB,EAApD,OAECqB,GAAW,mBAAGL,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAGIH,EAAOJ,KAAK,SAACC,GAAD,OAER,cAAC,EAAD,eAGIA,GAFEA,EAAIC,aEtBjBiB,EAAe,WAAM,MAGM9C,mBAAS,CAAC,cAHhB,mBAGvB+C,EAHuB,KAGXhD,EAHW,KAY9B,OACI,gCACI,8CACA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBAEA,6BAIPgD,EAAWpB,KAAK,SAAAT,GAEf,OAAO,cAAC,EAAD,CAENA,UAAWA,GADNA,YCvBZ8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d645b360.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport Proptypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setcategories} ) => {\r\n\r\n    const [inputvalue, setinputvalue] = useState(``)\r\n\r\n    const handleImputChange=(e)=>{\r\n\r\n            // console.log(e.target.value)\r\n            setinputvalue(e.target.value)\r\n    }\r\n\r\n    const hasdleSubmit=(e)=>{\r\n\r\n            e.preventDefault()\r\n\r\n            if (inputvalue.trim().length>2)\r\n            {\r\n                setcategories( cats => [inputvalue,...cats,]);      \r\n                setinputvalue('')\r\n            }\r\n            // console.log('Submit hecho')\r\n            \r\n            // console.log(props.otracosa)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n           <form onSubmit={hasdleSubmit}>\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputvalue}\r\n                    onChange={ handleImputChange }\r\n                />\r\n\r\n            </form>    \r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n \r\nAddCategory.prototypes={\r\n    setcategories: Proptypes.func.isRequired\r\n}","export const getGifs =async( categorie)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categorie)}&limit=10&api_key=CEowGI0Eo5OgmehprvznIEFb9pBOzpdW`\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs  = data.map(img => {\r\n       \r\n        return {\r\n\r\n             id:img.id,\r\n             title: img.title ,\r\n             url: img.images?.downsized_medium.url  \r\n             \r\n        }\r\n\r\n    })\r\n\r\n    \r\n    return (gifs)\r\n\r\n}   ","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title,url} ) => {\r\n\r\n    //  console.log( { id, title,url} )\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__shakeY\"> \r\n            <img\r\n                src={url}\r\n                alt={title}\r\n            />\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchgifs } from '../hooks/useFetchgifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\n\r\n\r\nexport const GifGrid = ({categorie}) => {\r\n\r\n    const {data:images,loading}=useFetchgifs( categorie )\r\n\r\n\r\n    // getGifs({categorie})\r\n\r\n    return (\r\n        \r\n        <>\r\n            <h3 className=\"animate__animated animate__shakeY\"> {categorie} </h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p> }  \r\n\r\n            <div className=\"card-grid\">\r\n\r\n            {\r\n                images.map( (img)   =>(\r\n\r\n                    <GifGridItem\r\n                    key= {img.id}\r\n                    // img= {img} \r\n                    {...img} />\r\n\r\n                ))\r\n\r\n            }\r\n\r\n\r\n            {/* <h3> {count} </h3>\r\n            <button onClick = { ()=>setcount(count+1) } ></button> */}\r\n            </div>\r\n\r\n        </>     \r\n\r\n    )\r\n}\r\n","import {useState,useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchgifs=( categoria )  =>{\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n\r\n    \r\n    useEffect(() => {\r\n\r\n        getGifs( categoria )\r\n        .then( imgs => {\r\n\r\n\r\n        \r\n                setstate({\r\n                    data:   imgs,\r\n                    loading:false  \r\n                })    \r\n        \r\n\r\n            })\r\n \r\n    }, [categoria ])\r\n\r\n    // const [count, setcount] = useState(0)\r\n\r\n    // useEffect( () => {\r\n\r\n    //     getGifs( categorie )\r\n    //     console.log(11111)\r\n\r\n    // }, []) \r\n\r\n    // useEffect(() => {\r\n\r\n\r\n    //Nuestro getGifs, si todo se resuelve correctamente ya que es async, nos devuelve los gifs, pero para eso, al llamarlo, tenemos que ejecutar un await o usar el .then para esperar a que todo se resuelva y tener la información.\r\n\r\n    // El useEffect como tal no puede ser async, por lo que no podemos usar el await del getGifs, es por eso que usamos el .then (que sí podemos usarlo dentro del useEffect) para esperar a que se resuelva y poder hacer el setImages.\r\n        \r\n        \r\n        \r\n    //     // Saludos.\r\n\r\n    //     // Si quieres usar el async y el await dentro de ese hook, debes hacerlo así\r\n\r\n    //     // useEffect( () => {\r\n        \r\n    //     //     async function fetchData() {\r\n    //     //         const imgs = await getGifs( category );\r\n    //     //         setImages( imgs );\r\n    //     //     }\r\n        \r\n    //     //     fetchData();\r\n        \r\n    //     // }, [category])\r\n\r\n    //     // Esto es lo mismo que\r\n    //     //  getGifs(categorie).then( img =>( setimages(img))\r\n    //    getGifs(categorie).then( img =>( setimages(img))\r\n    //    )\r\n    // }, [categorie])\r\n\r\n\r\n\r\n    \r\n\r\n    return state\r\n\r\n\r\n}","import React,{useState} from 'react'\r\nimport {AddCategory} from './components/AddCategory'\r\nimport {GifGrid} from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['One Puch', 'Samuraix' , 'Dragon Ball']\r\n    const [categories, setcategories] = useState(['One Punch'])\r\n\r\n    const handleAdd =()=>{\r\n\r\n        // categories.push('Lupin')\r\n        setcategories([...categories,'lupin']);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory  setcategories={setcategories}/>\r\n            <hr/>\r\n             {/* <button onClick={handleAdd}>Agregar</button>  */}\r\n            <ol>\r\n   \r\n\r\n                    {\r\n\t\t\t\t\tcategories.map( categorie =>  {\r\n\t\t\t\t\t\t//  return <li key={ categorie} >{categorie}</li>  \r\n\t\t\t\t\t\treturn <GifGrid\r\n\t\t\t\t\t\t\tkey={categorie}\r\n\t\t\t\t\t\t\tcategorie={categorie}\r\n\t\t\t\t\t\t/>\r\n                        })\r\n\r\n                    }\r\n                    \r\n                    \r\n\r\n            </ol>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}